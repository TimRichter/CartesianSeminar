Cartesisches Seminar April 2024
We read chpt.2 ("Type Theory in Principia Mathematica") of
Kamareddine, Laan, Nederpelt: "A Modern Perspective on Type Theory: From its Origins until Today"

Useful links:
- PM I https://archive.org/details/alfred-north-whitehead-bertrand-russel-principia-mathematica.-1/Alfred%20North%20Whitehead%2C%20Bertrand%20Russel%20-%20Principia%20Mathematica.%201/page/n9/mode/2up
- PM II https://archive.org/details/PrincipiaMathematicaVol2/mode/2up
- PM III https://archive.org/details/PrincipiaMathematicaVol3
- SEP on PM (by Linsky, Bernard and Irvine, Andrew David ) : https://plato.stanford.edu/entries/principia-mathematica/


Sebastian zum Buch:
- Typen in Mathematik immer schon implizit benutzt, Beispiel Punkte/Linien in Euklids Elementen
  Nicola: aber nicht dependent types, oft keine Unterscheidung totale/partielle Funktionen
  Georg: ...
  Nicola: Unterschied Paradoxien (Achilles und die Schildkr√∂te) und echten Antinomien (Russell!)
- Paradoxien k√∂nnen entstehen, wenn Intuition versagt, z.B. bei
  - sehr komplexen Systemen
  - hoher Abstraktionsgrad
  - wenn Maschinen (Computer) "verstehen" sollen (haben keine Intuition)
  Nicola: Typentheorie urspr√ºnglich zur Vermeidung von Widerspr√ºchen in Grundlagentheorie (Set theory,
  Hilbert program) , heutige Benutzung zur Erh√∂hung der Softwaresicherheit etwas orthogonal dazu
- Frege wird zitiert. Relevante Werke: "Begriffsschrift", "Grundlagen der Arithmetik", "Grundgesetze der Arithmetik"
  Logizismus: ganze Mathematik auf Logik gr√ºnden

\begin{code}
open import Data.Nat hiding (_+_)
open import Data.List
open import Data.Bool
open import Agda.Builtin.Equality
open import Data.Product
open import Data.Empty
open import Data.Maybe
open import Function.Base
module Principia
\end{code}

The text starts on p 22 with the definition of the notion of a "propositional function" in
Principia Mathematica (PM):

‚ü´ By a "propositional function" we mean something which contains a variable x, and expresses
  a propostion as soon as a value is assigned to x. ‚ü™

\begin{code}
  (A : Set)            -- set(type) of individual sysmbols
  (V : Set)            -- set(type) of variables
  (R : Set)            -- set(type) of relation symbols
  (a : R ‚Üí ‚Ñï)          -- arity
  -- alternative (relsyms : ‚Ñï ‚Üí Set)
  -- " R = Œ£ ‚Ñï relsyms "  und " a = proj‚ÇÅ "

  (_<_ : V ‚Üí V ‚Üí Set)  -- variables are ordered
  (PV : Set)           -- we postulate a type of sets of variables
  (_‚àà_ : V ‚Üí PV ‚Üí Set)  -- with a membership predicate
  (‚ü™_‚ü´ : List V ‚Üí PV)  -- with a function from lists of variables (in particular, ‚àÖ = ‚ü™[]‚ü´, {a} = ‚ü™a :: []‚ü´, a.s.o.
  (_‚à™_ : PV ‚Üí PV ‚Üí PV) -- featuring a union,
  (_‚à©_ : PV ‚Üí PV ‚Üí PV) -- an intersection, and
  (_-_ : PV ‚Üí PV ‚Üí PV) -- and a "set minus" operation.
  where

  -- as a warm-up : atomic propositions

  data AtomicProp : Set where
    MkAtomicProp : (r : R) ‚Üí (args : List A) ‚Üí (length args ‚â° a r) ‚Üí AtomicProp
    -- alternativ Lala :
    --   {n : ‚Ñï} ‚Üí relsyms n ‚Üí Vect A n ‚Üí AtomicProp

  ArityEq#Args : {X : Set} ‚Üí R √ó (List X) ‚Üí Set
  ArityEq#Args (r , args) = a r ‚â° length args

  AtomicProp' : Set
  AtomicProp' -- = Œ£ R (Œª r ‚Üí Œ£ (List A) (Œª args ‚Üí arity r ‚â° length args))
              -- = Œ£ (R √ó (List A)) (Œª (r , args) ‚Üí arity r ‚â° length args)
              = Œ£ (RS √ó (List AS)) ArityEq#Args

  -- now towards the type of propositional functions (Definition 2.3 in the book)

  -- We need the disjoint union type (a.k.a. Either, a.k.a. Or)
  infixr 18 _+_
  data _+_ (X Y : Set) : Set where
    inl :  X ‚Üí X + Y
    inr :  Y ‚Üí X + Y

  -- Here is the standard fold (a.k.a. recursor, a.k.a. non-dependent eliminator ...) of this type
  fold+ : {X Y Z : Set} ‚Üí (X ‚Üí Z) ‚Üí (Y ‚Üí Z) ‚Üí X + Y ‚Üí Z
  fold+ xToz yToz (inl x) = xToz x
  fold+ xToz yToz (inr y) = yToz y

  -- We use fold+ to define functions from X + Y to Maybe X resp. Maybe Y
  toMaybeL : {X Y : Set} ‚Üí X + Y ‚Üí Maybe X
  toMaybeL = fold+ just (const nothing)
  toMaybeR : {X Y : Set} ‚Üí X + Y ‚Üí Maybe Y
  toMaybeR = fold+ (const nothing) just

  toVs : List ( A + V ) ‚Üí List V
  toVs = mapMaybe toMaybeR
  {-
  -- we could have defined this explicitely by
  toVs []         = []
  toVs (inl a ‚à∑ avs) = toVs avs
  toVs (inr v ‚à∑ avs) = v ‚à∑ (toVs avs)
  -- but here we use the function mapMaybe from the standard library (Data.List.Base)
  mapMaybe : (A ‚Üí Maybe B) ‚Üí List A ‚Üí List B
  mapMaybe p []       = []
  mapMaybe p (x ‚à∑ xs) with p x
  ... | just y  = y ‚à∑ mapMaybe p xs
  ... | nothing =     mapMaybe p xs
  -}


  -- the type of propositional functions is defined mutually with the function FreeVars
  mutual
    data ùí´ : Set where
      ATOM   : (r : R) ‚Üí (args : List (A + V)) ‚Üí a r ‚â° length args ‚Üí ùí´
      OR     : ùí´ ‚Üí ùí´ ‚Üí ùí´
      NOT    : ùí´ ‚Üí ùí´
      FORALL : (f : ùí´) ‚Üí (x : V) ‚Üí x ‚àà (FreeVars f) ‚Üí ùí´
      Z      : List (A + V + ùí´) ‚Üí ùí´

    FreeVars : ùí´ ‚Üí PV
    FreeVars (ATOM r avs x)     = ‚ü™ toVs avs ‚ü´
    FreeVars (OR f g)           = (FreeVars f) ‚à™ (FreeVars g)
    FreeVars (NOT f)            = FreeVars f
    FreeVars (FORALL f x x‚ààFVf) = FreeVars f - ‚ü™ x ‚à∑ [] ‚ü´
    FreeVars (Z avps)           = ‚ü™ toVs' avps ‚ü´
       -- 1. bei uns z nicht drin, weil Konstruktor
       -- 2. Hier die einzige Stelle, wo ùí´'s vorkommen (n√§mlich in der Liste avps),
       --    aber FreeVars nicht rekursiv aufgerufen wird.
       -- Es ist nicht klar, ob das ad√§quat ist...

    toVs' : List ( A + V + ùí´ ) ‚Üí List V
    toVs' = mapMaybe ((_>>= toMaybeL) ‚àò toMaybeR)
    {-
    -- again, we could have defined this explicitely

    toVs' [] = []
    toVs' (inl a ‚à∑ avps) = toVs' avps
    toVs' (inr (inl v) ‚à∑ avps) = v ‚à∑ toVs' avps
    toVs' (inr (inr p) ‚à∑ avps) = toVs' avps

    -- Instead we have used mapMaybe, toMaybeR, toMaybeL and the "bind" operator of Maybe, defined in Data.Maybe.Base as

    _>>=_ : Maybe A ‚Üí (A ‚Üí Maybe B) ‚Üí Maybe B
    nothing >>= f = nothing
    just a  >>= f = f a

    -- Check the types! Why do we need _>>=_ ?
    -}

\end{code}
